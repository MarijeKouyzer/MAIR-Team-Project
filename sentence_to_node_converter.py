import re
from node import Node
from Levenshtein.StringMatcher import StringMatcher


class SentenceToNodeConverter:

    rules = {
        "i": ["np"],
        "want": ["np\s/np"],
        "a": ["np/n"],
        "restaurant": ["n", "(s/pp\(s))/(n\\s\\s)"],
        "serving": ["s\s/n"],
        "swedish": ["n/n"],
        "about": ["n\s/n"],
        "an": ["np\s/n", "np/n"],
        "and": ["(s\s)/s", "(np\np)/np"],
        "any": ["np", "np/np"],
        "area": ["np"],
        "can": ["np/np"],
        "catalan": ["n/n"],
        "center": ["n"],
        "cheap": ["n/n"],
        "chinese": ["n/n"],
        "cuban": ["n/n", "n/pp"],
        "expensive": ["n/n"],
        "find": ["s/np", "np/np", "np\s/np", "np\s/pp/np"],
        "for": ["pp/np", "pp/n", "(s/pp/pp)\((np)/(np\np))/(np\s)"],
        "have": ["np\s/np\s"],
        "im": ["np"],
        "in": ["pp/np", "n\pp/np"],
        "international": ["n/n"],
        "is": ["n/n", "n\s/pp/np"],
        "it": ["np"],
        "serve": ["(np\s)/n"],
        "serves": ["s/n"],
        "should": ["(np\s)/(np\s)"],
        "like": ["(np\s)/pp/np"],
        "looking": ["np\s/pp/pp", "np\s/pp"],
        "moderately": ["n/n"],
        "need": ["np\s/np", "np"],
        "of": ["pp/np"],
        "part": ["n/pp"],
        "persian": ["n/n"],
        "please": ["s\s", "pp"],
        "priced": ["n/pp", "n"],
        "south": ["n/n"],
        "that": ["s\s/s", "s\s/n"],
        "the": ["np/n"],
        "town": ["np"],
        "tuscan": ["n/n"],
        "wanna": ["np\s/s", "np\s/np"],
        "west": ["n/n"],
        "what": ["n"],
        "with": ["n\s\s/n"],
        "world": ["n/n"],
        "would": ["np\s/(np\s)"],
        "address": ["np"],
        "afghan": ["np/np"],
        "african": ["np/np"],
        "again": ["v\\vp"],
        "ah": ["s/s"],
        "alright": ["s/s"],
        "am": ["(np\s)/np", "(np\s)/(np\s)"],
        "american": ["np/np"],
        "anyone": ["np"],
        "anything": ["np"],
        "fancy": ["np/np"],
        "fast": ["np/np"],
        "fine": ["s/s"],
        "fish": ["np/np"],
        "food": ["n"],
        "foods": ["n"],
        "canapes": ["np/np"],
        "cantonese": ["np/np"],
        "care": ["np\s"],
        "caribbean": ["np/np"],
        "central": ["np", "np/np"],
        "centre": ["np"],
        "change": ["(np\s)/np", "(np\s)/(np\s)"],
        "iam": ["s"],
        "id": ["s"],
        "if": ["s/s"],
        "includes": ["(np\s)/np"],
        "indian": ["np/np"],
        "indonesian": ["np/np"],
        "inner": ["np/np"],
        "irish": ["np/np"],
        "italian": ["np/np"],
        "served": ["np\\np"],
        "list": ["np"],
        "long": ["np/np"],
        "look": ["(np\s)/(np\s)", "np\s"],
        "malaysian": ["np/np"],
        "matter": ["np\s"],
        "may": ["(np\s)/(np\s)"],
        "me": ["np"],
        "meant": ["np\s"],
        "mediterranean": ["np/np"],
        "medium": ["np/np"],
        "mexican": ["np/np"],
        "mind": ["np\s"],
        "missing": ["np/np", "np\s"],
        "moderate": ["np/np"],
        "modern": ["np/np"],
        "moroccan": ["np/np"],
        "moron": ["np"],
        "music": ["np"],
        "my": ["np/np"],
        "needs": ["np", "np\s/np"],
        "no": ["np/np"],
        "north": ["np/np"],
        "not": ["np/np", "np"],
        "parts": ["n/pp"],
        "place": ["np"],
        "polish": ["np/np"],
        "polynesia": ["np/np"],
        "polynesian": ["np/np"],
        "portuguese": ["np/np"],
        "prezzo": ["np"],
        "price": ["np", "np/np"],
        "prices": ["np"],
        "range": ["np"],
        "really": ["np/np"],
        "reasonably": ["np/np"],
        "repeat": ["np\s"],
        "type": ["np"],
        "uh": ["s/s", "s\s", "np\\np", "np/np"],
        "um": ["s/s", "s\s", "np\\np", "np/np"],
        "umh": ["s/s", "s\s", "np\\np", "np/np"],
        "unusual": ["np/np"],
        "vegetarian": ["np/np"],
        "venetian": ["np/np"],
        "venue": ["np"],
        "venues": ["np"],
        "vietnam": ["np/np"],
        "vietnamese": ["np/np"],
        "spanish": ["np/np"],
        "steak": ["np/np", "np"],
        "steakhouse": ["np/np", "np"],
        "such": ["np/np"],
        "surprise": ["(np\s)/np"],
        "swiss": ["np/np"],
        "system": ["s/s", "s\s", "np\\np", "np/np"],
        "tell": ["(np\s)/np"],
        "thai": ["np/np"],
        "thailand": ["np/np"],
        "thats": ["s"],
        "their": ["np/np"],
        "then": ["s/s", "s\s", "np\\np", "np/np"],
        "there": ["np"],
        "theres": ["s"],
        "they": ["np"],
        "thing": ["np"],
        "this": ["np/np"],
        "time": ["np"],
        "to": ["pp/np"],
        "traditional": ["np/np"],
        "try": ["(np\s)/np"],
        "trying": ["(np\s)/np"],
        "turkey": ["np/np"],
        "turkish": ["np/np"],
        "was": ["vp/adjP", "np\((s/pp)/np)"],
        "well": ["s/s", "s\s"],
        "welsh": ["np/np"],
        "whats": ["s"],
        "anywhere": ["np"],
        "are": ["(np\s)/np", "(np\s)/(np\s)"],
        "areas": ["np"],
        "asian": ["np/np"],
        "at": ["pp/np"],
        "australasian": ["np/np"],
        "australian": ["np/np"],
        "austrian": ["np/np"],
        "available": ["np/np", "adjP"],
        "barbecue": ["np/np"],
        "basque": ["np/np"],
        "be": ["(np\s)/(np\s)"],
        "belgian": ["np/np"],
        "belgium": ["np/np"],
        "beside": ["(s\s)/s"],
        "bistro": ["np/np"],
        "brazilian": ["np/np"],
        "breath": ["s/s", "s\s"],
        "british": ["np/np"],
        "but": ["(s\s)/s"],
        "bye": ["s"],
        "cambridge": ["np/np"],
        "chiquito": ["np/np"],
        "christmas": ["np/np"],
        "city": ["np/np", "np\\np"],
        "class": ["np"],
        "corsica": ["np/np"],
        "could": ["s/(np\s)"],
        "creative": ["np/np"],
        "crossover": ["np/np"],
        "damn": ["np/np"],
        "danish": ["np/np"],
        "dear": ["np/np"],
        "decide": ["(np\s)/np"],
        "did": ["(np\s)/np", "(np\s)/(np\s)"],
        "different": ["np/np"],
        "do": ["(np\s)/np", "(np\s)/(np\s)"],
        "does": ["(np\s)/np", "(np\s)/(np\s)"],
        "doesnt": ["(np\s)/np", "(np\s)/(np\s)"],
        "dont": ["(np\s)/np", "(np\s)/(np\s)"],
        "downtown": ["np/np"],
        "east": ["np/np"],
        "eat": ["(np\s)/np"],
        "else": ["s\s"],
        "english": ["np/np"],
        "eritrean": ["np/np"],
        "european": ["np/np"],
        "every": ["np/np"],
        "french": ["np/np"],
        "from": ["pp/np"],
        "fusion": ["np/np"],
        "gastro": ["np/np"],
        "gastropub": ["np/np"],
        "german": ["np/np"],
        "get": ["(np\s)/np"],
        "give": ["(np\s)/np"],
        "good": ["np/np"],
        "got": ["(np\s)/np"],
        "greek": ["np/np"],
        "halal": ["np/np"],
        "harbor": ["np/np"],
        "has": ["(np\s)/np", "(np\s)/(np\s)"],
        "help": ["np/s"],
        "high": ["np/np"],
        "hindi": ["np/np"],
        "house": ["np"],
        "how": ["pp/np"],
        "hungarian": ["np/np"],
        "its": ["np/np"],
        "jamaican": ["np/np"],
        "japanese": ["np/np"],
        "just": ["s\s", "s/s"],
        "kind": ["np/np"],
        "know": ["(np\s)/np"],
        "korea": ["np/np"],
        "korean": ["np/np"],
        "kosher": ["np/np"],
        "lebanese": ["np/np"],
        "let": ["s/s"],
        "lets": ["s/s"],
        "oh": ["s/s"],
        "ok": ["s/s", "np/np"],
        "okay": ["s/s"],
        "on": ["pp/np"],
        "one": ["np/np"],
        "oriental": ["np/np"],
        "other": ["np/np"],
        "pan": ["np"],
        "park": ["np"],
        "restaurants": ["n"],
        "rice": ["np"],
        "romania": ["np/np"],
        "romanian": ["np/np"],
        "russian": ["np/np"],
        "said": ["np\s"],
        "says": ["np\s"],
        "scandinavia": ["np/np"],
        "scandinavian": ["np/np"],
        "scottish": ["np/np"],
        "sea": ["np"],
        "seafood": ["np"],
        "searching": ["(np\s)/np"],
        "see": ["(np\s)/np"],
        "sells": ["(np\s)/np"],
        "side": ["np"],
        "singapore": ["np/np"],
        "singaporean": ["np/np"],
        "so": ["s/s", "s\s", "np\\np", "np/np"],
        "sock": ["np"],
        "some": ["np/np"],
        "something": ["np"],
        "sorry": ["s", "s/s", "s\s"],
        "yes": ["s/s", "s\s"],
        "you": ["np"],
        "yourself": ["np"]
    }

    @staticmethod
    def normalise_line(line):
        # Make text lower case
        text = line.lower()
        # Remove characters from string to standardise the strings
        text = re.sub('[!"#$%&()*+,-./:;<=>?@[\]^_`{|}~]', '', text)
        return text

    def build_node_list(self, line: str) -> list:
        line = self.normalise_line(line)
        # Change the text into a list of nodes containing the word and the type
        word_list = line.split(" ")
        node_list = list()
        for word in word_list:
            word_node = Node()
            word, types = self.get_word(word)
            word_node.text = word
            word_node.types = types
            node_list.append(word_node)
        # Return the nodes
        return node_list

    def get_word(self, word):
        if word in self.rules.keys():
            return word, self.rules[word]
        levenshtein_distances = {}
        for word_key in self.rules.keys():
            levenshtein_distances[word_key] = StringMatcher(seq1=word, seq2=word_key).distance()
        min_valued_word = ""
        min_valued_word_value = -1
        for k_key, v_value in levenshtein_distances.items():
            if v_value < min_valued_word_value or min_valued_word_value == -1:
                min_valued_word = k_key
                min_valued_word_value = v_value
        return min_valued_word, self.rules[min_valued_word]